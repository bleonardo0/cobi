import { NextRequest, NextResponse } from 'next/server';
import { analyticsStorage } from '@/lib/analytics-storage';

export async function POST(request: NextRequest) {
  try {
    const { restaurantId, resetToZero = true } = await request.json();
    
    console.log('üóëÔ∏è D√©but du reset analytics:', { restaurantId, resetToZero });
    
    // V√©rifications de s√©curit√©
    if (!restaurantId || typeof restaurantId !== 'string') {
      console.log('‚ùå Restaurant ID manquant ou invalide:', restaurantId);
      return NextResponse.json(
        { success: false, error: 'Restaurant ID requis' },
        { status: 400 }
      );
    }

    // TODO: V√©rifier que l'utilisateur est admin
    // Pour l'instant, on fait confiance au frontend
    // Plus tard, on ajoutera une v√©rification JWT/session
    
    console.log('üîÑ Appel de resetRestaurantAnalytics avec:', { restaurantId, completeReset: !resetToZero });
    
    // Remettre √† z√©ro les analytics du restaurant
    // Si resetToZero = true, on remet vraiment √† z√©ro (0 vues)
    // Si resetToZero = false, on r√©g√©n√®re des donn√©es de base
    const result = await analyticsStorage.resetRestaurantAnalytics(restaurantId, !resetToZero);
    
    const action = resetToZero ? 'remis √† z√©ro' : 'r√©initialis√© avec donn√©es de base';
    
    console.log('‚úÖ Reset termin√© avec succ√®s:', result);
    
    return NextResponse.json({
      success: true,
      message: `Analytics ${action} pour le restaurant ${restaurantId}`,
      data: result
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors du reset des analytics:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error instanceof Error ? error.message : 'Erreur inconnue' 
      },
      { status: 500 }
    );
  }
} 